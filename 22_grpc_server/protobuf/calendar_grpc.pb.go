// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             v3.21.12
// source: protobuf/calendar.proto

//$ go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
//$ go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
//$ export PATH="$PATH:$(go env GOPATH)/bin"
// protoc --go_out=. --go_opt=paths=source_relative --go-grpc_out=. --go-grpc_opt=require_unimplemented_servers=false=paths=source_relative protobuf/*.proto

package grpc_server

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	timestamppb "google.golang.org/protobuf/types/known/timestamppb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	CreateEvent_Create_FullMethodName = "/grpc_server.CreateEvent/create"
)

// CreateEventClient is the client API for CreateEvent service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type CreateEventClient interface {
	Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error)
}

type createEventClient struct {
	cc grpc.ClientConnInterface
}

func NewCreateEventClient(cc grpc.ClientConnInterface) CreateEventClient {
	return &createEventClient{cc}
}

func (c *createEventClient) Create(ctx context.Context, in *Event, opts ...grpc.CallOption) (*Event, error) {
	out := new(Event)
	err := c.cc.Invoke(ctx, CreateEvent_Create_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CreateEventServer is the server API for CreateEvent service.
// All implementations should embed UnimplementedCreateEventServer
// for forward compatibility
type CreateEventServer interface {
	Create(context.Context, *Event) (*Event, error)
}

// UnimplementedCreateEventServer should be embedded to have forward compatible implementations.
type UnimplementedCreateEventServer struct {
}

func (UnimplementedCreateEventServer) Create(context.Context, *Event) (*Event, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Create not implemented")
}

// UnsafeCreateEventServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to CreateEventServer will
// result in compilation errors.
type UnsafeCreateEventServer interface {
	mustEmbedUnimplementedCreateEventServer()
}

func RegisterCreateEventServer(s grpc.ServiceRegistrar, srv CreateEventServer) {
	s.RegisterService(&CreateEvent_ServiceDesc, srv)
}

func _CreateEvent_Create_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Event)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CreateEventServer).Create(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: CreateEvent_Create_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CreateEventServer).Create(ctx, req.(*Event))
	}
	return interceptor(ctx, in, info, handler)
}

// CreateEvent_ServiceDesc is the grpc.ServiceDesc for CreateEvent service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var CreateEvent_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_server.CreateEvent",
	HandlerType: (*CreateEventServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "create",
			Handler:    _CreateEvent_Create_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/calendar.proto",
}

const (
	GetList_List_FullMethodName = "/grpc_server.GetList/list"
)

// GetListClient is the client API for GetList service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GetListClient interface {
	List(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*Events, error)
}

type getListClient struct {
	cc grpc.ClientConnInterface
}

func NewGetListClient(cc grpc.ClientConnInterface) GetListClient {
	return &getListClient{cc}
}

func (c *getListClient) List(ctx context.Context, in *timestamppb.Timestamp, opts ...grpc.CallOption) (*Events, error) {
	out := new(Events)
	err := c.cc.Invoke(ctx, GetList_List_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GetListServer is the server API for GetList service.
// All implementations should embed UnimplementedGetListServer
// for forward compatibility
type GetListServer interface {
	List(context.Context, *timestamppb.Timestamp) (*Events, error)
}

// UnimplementedGetListServer should be embedded to have forward compatible implementations.
type UnimplementedGetListServer struct {
}

func (UnimplementedGetListServer) List(context.Context, *timestamppb.Timestamp) (*Events, error) {
	return nil, status.Errorf(codes.Unimplemented, "method List not implemented")
}

// UnsafeGetListServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GetListServer will
// result in compilation errors.
type UnsafeGetListServer interface {
	mustEmbedUnimplementedGetListServer()
}

func RegisterGetListServer(s grpc.ServiceRegistrar, srv GetListServer) {
	s.RegisterService(&GetList_ServiceDesc, srv)
}

func _GetList_List_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(timestamppb.Timestamp)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GetListServer).List(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GetList_List_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GetListServer).List(ctx, req.(*timestamppb.Timestamp))
	}
	return interceptor(ctx, in, info, handler)
}

// GetList_ServiceDesc is the grpc.ServiceDesc for GetList service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GetList_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "grpc_server.GetList",
	HandlerType: (*GetListServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "list",
			Handler:    _GetList_List_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/calendar.proto",
}
